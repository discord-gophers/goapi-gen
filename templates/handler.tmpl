{{ with genTaggedMiddleware . -}}
// Middlewares holds the set of middleware for this service
type Middlewares struct {
	{{range $m := . -}}
	{{$m | ucFirst }} func(http.Handler) http.Handler
	{{ end  -}}
}
{{ end  }}

type ServerOptions struct {
	BaseURL string
	BaseRouter chi.Router
	{{ with genTaggedMiddleware . -}}
	Middlewares Middlewares
	{{ end -}}
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type ServerOption func(*ServerOptions)

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface, opts ...ServerOption) http.Handler {
	options := &ServerOptions {
		BaseURL: "/",
		BaseRouter: chi.NewRouter(),
		{{ with genTaggedMiddleware . -}}
		Middlewares: Middlewares{},
		{{ end -}}
		ErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
	}

	for _, f := range opts {
		f(options)
	}

	r := options.BaseRouter
	{{if . -}}
	wrapper := ServerInterfaceWrapper{
		Handler: si,
		{{ with genTaggedMiddleware . -}}
		Middlewares: options.Middlewares,
		{{ end -}}
		ErrorHandlerFunc: options.ErrorHandlerFunc,
	}
	{{- end }}

	{{ with genTaggedMiddleware . -}}
	// Operation specific middleware
	{{- range $m := . }}
	if options.Middlewares.{{$m | ucFirst }} == nil {
		panic("goapi-gen: could not find tagged middleware {{$m}} ({{$m | ucFirst }})")
	}
	{{- end }}
	{{end}}

	r.Route(options.BaseURL, func(r chi.Router) {
	{{range . -}}
		r.{{.Method | lower | title }}("{{.Path | swaggerURIToChiURI}}", wrapper.{{.OperationID}})
	{{ end -}}
	})
	return r
}

func WithRouter(r chi.Router) ServerOption {
	return func(s *ServerOptions) {
		s.BaseRouter = r
	}
}

func WithServerBaseURL(url string) ServerOption {
	return func(s *ServerOptions) {
		s.BaseURL = url
	}
}

{{ with genTaggedMiddleware . -}}
{{range $m := . -}}
func With{{$m | ucFirst }}Middleware(middleware func(http.Handler) http.Handler) ServerOption {
	return func(s *ServerOptions) {
		s.Middlewares.{{$m | ucFirst }} = middleware
	}
}

{{ end }}

func WithMiddlewares(middlewares Middlewares) ServerOption {
	return func(s *ServerOptions) {
		s.Middlewares = middlewares
	}
}
{{ end }}

func WithErrorHandler(handler func(w http.ResponseWriter, r *http.Request, err error)) ServerOption {
	return func(s *ServerOptions) {
		s.ErrorHandlerFunc = handler
	}
}
