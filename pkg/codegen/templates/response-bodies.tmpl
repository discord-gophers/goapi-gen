{{if .}}

// Response is a common response struct for all the API calls.
// A Response object may be instantiated via functions for specific operation responses.
type Response struct {
    body interface{}
    statusCode int
    contentType string
}

// Render implements the render.Renderer interface. It sets the Content-Type header
// and status code based on the response definition.
func (resp *Response) Render(w http.ResponseWriter, r *http.Request) error {
    w.Header().Set("Content-Type", resp.contentType)
    render.Status(r, resp.statusCode)
    return nil
}

// Status is a builder method to override the default status code for a response.
func (resp *Response) Status(statusCode int) *Response {
    resp.statusCode = statusCode
    return resp
}

// ContentType is a builder method to override the default content type for a response.
func (resp *Response) ContentType(contentType string) *Response {
    resp.contentType = contentType
    return resp
}

// MarshalJSON implements the json.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalJSON() ([]byte, error) {
    return json.Marshal(resp.body)
}

// MarshalXML implements the xml.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.Encode(resp.body)
}

{{end}}

{{range .}}{{$opid := .OperationId}}
{{range getResponseTypeDefinitions .}}

// {{$opid | ucFirst}}{{.TypeName | title}}Response is a constructor method for a {{$opid | ucFirst}} response.
// A *Response is returned with the configured status code and content type from the spec.
func {{$opid | ucFirst}}{{.TypeName | title}}Response(body {{.Schema.TypeDecl}}) *Response {
    return &Response{
            body: body,
            statusCode: {{.ResponseName | statusCode}},
            contentType: "{{.ContentTypeName}}",
    }
}

{{end}}
{{end}}