// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
  return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
    BaseURL string
    BaseRouter chi.Router
    Middlewares []MiddlewareFunc
	TaggedMiddlewares map[string]MiddlewareFunc
    ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
    return HandlerWithOptions(si, ChiServerOptions {
        BaseRouter: r,
    })
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
    return HandlerWithOptions(si, ChiServerOptions {
        BaseURL: baseURL,
        BaseRouter: r,
    })
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
    r := options.BaseRouter

    if r == nil {
        r = chi.NewRouter()
    }

    if options.ErrorHandlerFunc == nil {
        options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
            http.Error(w, err.Error(), http.StatusBadRequest)
        }
    }

    if options.BaseURL == "" {
        options.BaseURL = "/"
    }

    {{if .}}wrapper := ServerInterfaceWrapper{
        Handler: si, HandlerMiddlewares:
        options.Middlewares,
        TaggedMiddlewares: options.TaggedMiddlewares,
        ErrorHandlerFunc: options.ErrorHandlerFunc,
    }
    {{ end }}
    r.Route(options.BaseURL, func(r chi.Router) {
    {{range . -}}
        r.{{.Method | lower | title }}("{{.Path | swaggerUriToChiUri}}", wrapper.{{.OperationId}})
    {{ end }}
    })
    return r
}
