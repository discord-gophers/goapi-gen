// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
	Middlewares map[string]func(http.Handler) http.Handler
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

{{range .}}{{$opid := .OperationId}}

// {{$opid}} operation middleware
func (siw *ServerInterfaceWrapper) {{$opid}}(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	{{range .PathParams}}// ------------- Path parameter "{{.ParamName}}" -------------
	var {{$varName := .GoVariableName}}{{$varName}} {{.TypeDef}}

	{{if .IsPassThrough}}
	{{$varName}} = chi.URLParam(r, "{{.ParamName}}")
	{{end}}
	{{if .IsJson}}
	if err := json.Unmarshal([]byte(chi.URLParam(r, "{{.ParamName}}")), &{{$varName}}); err != nil {
		err = fmt.Errorf("error unmarshaling parameter '{{.ParamName}}' as JSON: %w", err)
		siw.ErrorHandlerFunc(w, r, &UnmarshalingParamError{err})
		return
	}
	{{end}}
	{{if .IsStyled}}
	if err := runtime.BindStyledParameter("{{.Style}}",{{.Explode}}, "{{.ParamName}}", chi.URLParam(r, "{{.ParamName}}"), &{{$varName}}); err != nil {
		err = fmt.Errorf("invalid format for parameter {{.ParamName}}: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err})
		return
	}
	{{end}}

	{{end}}

{{range .SecurityDefinitions}}
	ctx = context.WithValue(ctx, {{.ProviderName | ucFirst}}Scopes, {{toStringArray .Scopes}})
{{end}}

	{{if .RequiresParamObject}}
		// Parameter object where we will unmarshal all parameters from the context
		var params {{.OperationId}}Params

		{{range $paramIdx, $param := .QueryParams}}// ------------- {{if .Required}}Required{{else}}Optional{{end}} query parameter "{{.ParamName}}" -------------
			{{if .IsStyled}}
			if err := runtime.BindQueryParameter("{{.Style}}", {{.Explode}}, {{.Required}}, "{{.ParamName}}", r.URL.Query(), &params.{{.GoName}}); err != nil {
				err = fmt.Errorf("invalid format for parameter {{.ParamName}}: %w", err)
				siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err})
				return
			}
			{{else}}
			if paramValue := r.URL.Query().Get("{{.ParamName}}"); paramValue != "" {
			{{if .IsPassThrough}}
				params.{{.GoName}} = {{if not .Required}}&{{end}}paramValue
			{{end}}
			{{if .IsJson}}
				var value {{.TypeDef}}
				if err := json.Unmarshal([]byte(paramValue), &value); err != nil {
					err = fmt.Errorf("error unmarshaling parameter '{{.ParamName}}' as JSON: %w", err)
					siw.ErrorHandlerFunc(w, r, &UnmarshalingParamError{err})
					return
				}
				params.{{.GoName}} = {{if not .Required}}&{{end}}value
			{{end}}
			}{{if .Required}} else {
					err := fmt.Errorf("query argument {{.ParamName}} is required, but not found")
					siw.ErrorHandlerFunc(w, r, &RequiredParamError{err})
					return
			}{{end}}
			{{end}}
	{{end}}

		{{if .HeaderParams}}
			headers := r.Header

			{{range .HeaderParams}}// ------------- {{if .Required}}Required{{else}}Optional{{end}} header parameter "{{.ParamName}}" -------------
				if valueList, found := headers[http.CanonicalHeaderKey("{{.ParamName}}")]; found {
					var {{.GoName}} {{.TypeDef}}
					n := len(valueList)
					if n != 1 {
						err := fmt.Errorf("expected one value for {{.ParamName}}, got %d", n)
						siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{err})
						return
					}

				{{if .IsPassThrough}}
					params.{{.GoName}} = {{if not .Required}}&{{end}}valueList[0]
				{{end}}

				{{if .IsJson}}
					if err := json.Unmarshal([]byte(valueList[0]), &{{.GoName}}); err != nil {
						err = fmt.Errorf("error unmarshaling parameter '{{.ParamName}}' as JSON: %w", err)
						siw.ErrorHandlerFunc(w, r, &UnmarshalingParamError{err})
						return
					}
				{{end}}

				{{if .IsStyled}}
					if err := runtime.BindStyledParameterWithLocation("{{.Style}}",{{.Explode}}, "{{.ParamName}}", runtime.ParamLocationHeader, valueList[0], &{{.GoName}}); err != nil {
						err = fmt.Errorf("invalid format for parameter {{.ParamName}}: %w", err)
						siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err})
						return
					}
				{{end}}

					params.{{.GoName}} = {{if not .Required}}&{{end}}{{.GoName}}

				} {{if .Required}}else {
						err := fmt.Errorf("header parameter {{.ParamName}} is required, but not found")
						siw.ErrorHandlerFunc(w, r, &RequiredHeaderError{err})
						return
				}{{end}}

			{{end}}
		{{end}}

		{{range .CookieParams}}
			if cookie, err := r.Cookie("{{.ParamName}}"); err == nil {

			{{- if .IsPassThrough}}
				params.{{.GoName}} = {{if not .Required}}&{{end}}cookie.Value
			{{end}}

			{{- if .IsJson}}
				var value {{.TypeDef}}
				var decoded string
				decoded, err := url.QueryUnescape(cookie.Value)
				if err != nil {
					err = fmt.Errorf("error unescaping cookie parameter '{{.ParamName}}'")
					siw.ErrorHandlerFunc(w, r, &UnescapedCookieParamError{err})
					return
				}

				err = json.Unmarshal([]byte(decoded), &value)
				if err != nil {
					err = fmt.Errorf("error unmarshaling parameter '{{.ParamName}}' as JSON: %w", err)
					siw.ErrorHandlerFunc(w, r, &UnmarshalingParamError{err})
					return
				}

				params.{{.GoName}} = {{if not .Required}}&{{end}}value
			{{end}}

			{{- if .IsStyled}}
				var value {{.TypeDef}}
				if err := runtime.BindStyledParameter("simple",{{.Explode}}, "{{.ParamName}}", cookie.Value, &value); err != nil {
					err = fmt.Errorf("invalid format for parameter {{.ParamName}}: %w", err)
					siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err})
					return
				}
				params.{{.GoName}} = {{if not .Required}}&{{end}}value
			{{end}}

			}

			{{- if .Required}} else {
				err := fmt.Errorf("query argument {{.ParamName}} is required, but not found")
				siw.ErrorHandlerFunc(w, r, &RequiredParamError{err})
				return
			}
			{{- end}}
		{{end}}
	{{end}}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.{{.OperationId}}(w, r{{genParamNames .PathParams}}{{if .RequiresParamObject}}, params{{end}})
	})

	{{ with .Middlewares -}}
	// Operation specific middleware
	{{- range . }}
	{{ $tag := printf "%q" . -}}
	handler = siw.Middlewares[{{$tag}}](handler).ServeHTTP
	{{- end }}
	{{- end }}

	handler(w, r.WithContext(ctx))
}
{{end}}

type UnescapedCookieParamError struct {
	error
}
type UnmarshalingParamError struct {
	error
}
type RequiredParamError struct {
	error
}
type RequiredHeaderError struct {
	error
}
type InvalidParamFormatError struct {
	error
}
type TooManyValuesForParamError struct {
	error
}


